@page "/informaticsClub/tic-tac-toe"
@inject IStringLocalizer<Resources.InformaticsClub.Lang> localizer
@inject IJSRuntime JsRuntime


<div class="container">
    <HxCard class="mt-3 shadow">
        <HeaderTemplate>
            <h2 class="card-title">@localizer["project8.heading"]</h2>
        </HeaderTemplate>
        <BodyTemplate>
            @if (!gameCompleted)
            {
                <div class="game-container">
                    <div class="grid">
                        @for (var i = 0; i < 9; i++)
                        {
                            int index = i;
                            int x = index % 3;
                            int y = index / 3;
                            <div class="cell" onclick="@(()=>cellClick(index))" style="@("font-size:"+fontSize)">
                                @grid[y,x]
                            </div>
                        }

                    </div>
                </div>

            }
            else
            {
                <div class="text-center my-5">
                    @if (winner == "player")
                    {
                        <h1>@localizer["project8.end.win"]</h1>
                    }
                    else if (winner == "computer")
                    {
                        <h1>@localizer["project8.end.lose"]</h1>
                    }
                    else
                    {
                        <h1>@localizer["project8.end.draw"]</h1>

                    }
                    <HxButton Color="ThemeColor.Dark" OnClick="restart">@localizer["project8.button.restart"]</HxButton>
                </div>
            }

        </BodyTemplate>
    </HxCard>
</div>

@code
{
    struct WindowDimension { public int Width { get; set; } public int Height { get; set; } }
    string[,] grid = new string[3, 3] { { "", "", "" }, { "", "", "" }, { "", "", "" } };
    bool computerTurn = false;
    bool gameCompleted = false;
    string winner = ""; //'' | 'player' | 'computer' = '';
    string fontSize = "";

    protected async override void OnInitialized()
    {
        var dimension = await JsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
        if (dimension.Height < dimension.Width)
        {
            fontSize = "15vh";
        }
        else
        {
            fontSize = "15vw";
        }
    }


    async Task cellClick(int index)
    {
        if (!computerTurn)
        {
            int x = index % 3;
            int y = index / 3;

            if (grid[y, x] == "")
            {
                grid[y, x] = "X";
                if (lineComplete("X"))
                {
                    await Task.Run(async () =>
                    {
                        await InvokeAsync(StateHasChanged);
                        await Task.Delay(500);
                        gameCompleted = true;
                        winner = "player";
                        await InvokeAsync(StateHasChanged);
                    });
                    return;
                }
                else if (gridFull())
                {
                    gameCompleted = true;
                    winner = "draw";
                }
            }
            computerTurn = true;
            await Task.Run(async () =>
            {
                await InvokeAsync(StateHasChanged);
                await Task.Delay(500);
                await playComputerTurn();
            });
        }
    }

    async Task playComputerTurn()
    {
        for (int y = 0; y < 3; y++)
        {
            for (int x = 0; x < 3; x++)
            {
                if (grid[y, x] == "")
                {
                    grid[y, x] = "O";
                    await Task.Run(async () =>
                       {
                           await InvokeAsync(StateHasChanged);
                           await Task.Delay(500);
                           if (lineComplete("O"))
                           {
                               gameCompleted = true;
                               winner = "computer";
                           }
                           else if (gridFull())
                           {
                               gameCompleted = true;
                               winner = "draw";
                           }
                           computerTurn = false;
                           await InvokeAsync(StateHasChanged);
                       });
                    return;
                }
            }
        }

    }

    void restart()
    {
        grid = new string[3, 3] { { "", "", "" }, { "", "", "" }, { "", "", "" } };
        computerTurn = false;
        gameCompleted = false;
        winner = "";
    }

    bool lineComplete(string c)
    {
        if (
        grid[0, 0] == c && grid[0, 1] == c && grid[0, 2] == c ||
        grid[1, 0] == c && grid[1, 1] == c && grid[1, 2] == c ||
        grid[2, 0] == c && grid[2, 1] == c && grid[2, 2] == c ||
        grid[0, 0] == c && grid[1, 0] == c && grid[2, 0] == c ||
        grid[0, 1] == c && grid[1, 1] == c && grid[2, 1] == c ||
        grid[0, 2] == c && grid[1, 2] == c && grid[2, 2] == c ||
        grid[0, 0] == c && grid[1, 1] == c && grid[2, 2] == c ||
        grid[0, 2] == c && grid[1, 1] == c && grid[2, 0] == c
        )
        {
            return true;
        }
        return false;
    }

    bool gridFull()
    {
        for (var i = 0; i < 3; i++)
        {
            for (var j = 0; j < 3; j++)
            {
                if (grid[i, j] == "")
                {
                    return false;
                }
            }
        }
        return true;
    }
}